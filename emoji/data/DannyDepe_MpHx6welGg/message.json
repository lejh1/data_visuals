{
  "participants": [
    {
      "name": "Danny Depe"
    },
    {
      "name": "Justin Le"
    }
  ],
  "messages": [
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588477536,
      "content": "Huh I wonder how it got there",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588471273,
      "content": "Maybe longer LOL",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588454031,
      "content": "\u00f0\u009f\u0098\u00ae I\u00e2\u0080\u0099ve been looking for that for the past year lol",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1542588437480,
      "content": "My moms place",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588422412,
      "content": "I\u00e2\u0080\u0099ve been looking for that",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588415219,
      "content": "Where\u00e2\u0080\u0099d I leave that lol",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1542588391233,
      "content": "I found it on a flash drive you left apparently",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588264854,
      "content": "That was her final project for her solidworks class lol I think she got a B+ on it",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1542588145057,
      "content": "Danny sent a sticker.",
      "sticker": {
        "uri": "messages/stickers_used/14279485_1804313679813864_506115815_n_1804313676480531.png"
      },
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1542588133184,
      "content": "Why lol",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1542583659918,
      "content": "https://www.youtube.com/watch?v=WF0MnSGGUIA",
      "share": {
        "link": "https://www.youtube.com/watch?v=WF0MnSGGUIA"
      },
      "type": "Share"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1541702852694,
      "content": "You and Danny waved at each other!",
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1541701761077,
      "content": "Danny is waving at you!",
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1535486393141,
      "content": "https://i.imgur.com/lSoUQr2.png",
      "share": {
        "link": "https://i.imgur.com/lSoUQr2.png"
      },
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1531966919367,
      "content": "Danny sent a photo.",
      "photos": [
        {
          "uri": "messages/inbox/DannyDepe_MpHx6welGg/photos/36371296_10211625632133263_6274244897813823488_n_1803911152996860.jpg",
          "creation_timestamp": 1531966917
        }
      ],
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1529166500581,
      "content": "https://yelp.to/qTKq/FbwgVbUENN",
      "share": {
        "link": "https://yelp.to/qTKq/FbwgVbUENN"
      },
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1511568925951,
      "content": "https://github.com/nvchung599/JerbBot",
      "share": {
        "link": "https://github.com/nvchung599/JerbBot"
      },
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1511564123965,
      "content": "Danny sent an attachment.",
      "files": [
        {
          "uri": "messages/inbox/DannyDepe_MpHx6welGg/files/DannyDepeCoverLetter4_1541569589231019.docx",
          "creation_timestamp": 1511564122
        }
      ],
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1482472038192,
      "content": "Yes",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1482472032124,
      "content": "What",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1482472006548,
      "content": "here you go",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1482472000243,
      "content": "http://www.gettinschmidtywitit.com/",
      "share": {
        "link": "http://www.gettinschmidtywitit.com/"
      },
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1481157579419,
      "content": "Yeah",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1481157564274,
      "content": "What",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1481156509715,
      "content": "I sent this link to you so I could open it on my computer and check if the site was legit.",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1481156474540,
      "content": "Get hacked bitchhhhh",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1481156467563,
      "content": "http://go.vzw.com/verizonselects",
      "share": {
        "link": "https://devices.verizonwireless.com/content/Verizon-selects-1GB-data-cap.html?CMP=GVW-LNK-VZSELECTS"
      },
      "type": "Share"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464904710093,
      "content": "C++",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464904689124,
      "content": "booo",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464904672654,
      "content": "You need external files",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464904611262,
      "content": "can i run it or do i need external files?",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464904599978,
      "content": "why did you send me it lol it is very long",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464904588450,
      "content": "Is that C or C++?",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464904558949,
      "content": "My code for my project due tomorrow night",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464902774576,
      "content": "enlighten me",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464902521634,
      "content": "what is that",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464902519579,
      "content": "hello",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464902464964,
      "content": "Hi",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464902460347,
      "content": "#include <list>\n#include <string>\n#include <iostream>\n#include <fstream>\n#include <cassert>\n#include <algorithm>\n#include \"hash.h\"\n\nusing namespace std;\n\nconst int N = 16;\nstruct Read\n{\n\tstring m_value;\n\tint m_length;\n\tint m_offset;\n};\n\nvoid createDelta(istream& oldf, istream& newf, ostream& deltaf);\n\nbool applyDelta(istream& oldf, istream& deltaf, ostream& newf);\n\nvoid createDelta(istream& oldf, istream& newf, ostream& deltaf)\n{\n\tstring oldData;\n\toldf.seekg(0, oldf.end);\n\tint size = oldf.tellg();\n\toldData.resize(size); // get length of file\n\toldf.seekg(0, oldf.beg);\n\toldf.read(&oldData[0], oldData.size()); // read data as a block\n\n\t#ifdef _WIN32  //  Windows OS\n\tcerr << oldData.size() << endl;\n\tint rCount = count(oldData.begin(), oldData.end(), '\\n') - 1;\n\tif (rCount < 0)\n\t\trCount = 0;\n\toldData.erase(oldData.end() - rCount, oldData.end());\n\t#endif\n\n\tcerr << oldData.size() << endl;\n\t//cerr << oldData + \"HAHAHHA\" << endl;\n\n\tHash deltaHash = Hash(); \n\tfor (int i = 0; i < oldData.size() - N - 1; i++) //Fill hash table\n\t{\n\t\tdeltaHash.insert(oldData.substr(i, N), i);\n\t\t//cerr << oldData.substr(i, N) << endl;\n\t}\n\tstring newData;\n\tnewf.seekg(0, newf.end);\n\tnewData.resize(newf.tellg()); // get length of file\n\tnewf.seekg(0, newf.beg);\n\tnewf.read(&newData[0], newData.size()); // read data as a block\n\n\t#ifdef _WIN32  //  Windows OS\n\trCount = count(newData.begin(), newData.end(), '\\n') - 1;\n\tif (rCount < 0)\n\t\trCount = 0;\n\tnewData.erase(newData.end() - rCount, newData.end());\n\t#endif\n\n\tlist<Read*> tempInstruct;\n\tRead *temp;\n\tbool lastAdd = true;\n\tint offset = 0;\n\tint Same = N;\n\t//cerr << newData.size() - N - 1 << endl;\n\t//cerr << newData.substr(0, N) << endl;\n\n\tfor (int j = 0; j < newData.size() - 1; j++)\n\t{\n\t\tif (j < newData.size() - N - 1)\n\t\t{\n\t\t\tif (deltaHash.getOffset(newData.substr(j, N), offset))\n\t\t\t{\n\t\t\t\t//cerr << \"Line 60\" << endl;\n\t\t\t\tif (lastAdd)\n\t\t\t\t{\n\t\t\t\t\t//cerr << \"Line 63: \" << j << endl;\n\t\t\t\t\ttemp = new Read;\n\t\t\t\t\ttemp->m_value = \"C\";\n\t\t\t\t\tSame = N;\n\t\t\t\t\ttemp->m_offset = offset;\n\t\t\t\t\twhile (j + Same < newData.size() - 1 && offset + Same < oldData.size() - 1 && newData[j + Same] == oldData[offset + Same])\n\t\t\t\t\t{\n\t\t\t\t\t\tSame++;\n\t\t\t\t\t}\n\t\t\t\t\ttemp->m_length = Same;\n\t\t\t\t\ttempInstruct.push_back(temp);\n\t\t\t\t\tj += Same - 1;\n\t\t\t\t\tlastAdd = false;\n\n\t\t\t\t}\n\t\t\t\telse if (!lastAdd)\n\t\t\t\t{\n\t\t\t\t\t/*if (offset == tempInstruct.back()->m_offset + N)\n\t\t\t\t\t{\n\t\t\t\t\t\t//cerr << \"Line 73: \" << j << endl;\n\t\t\t\t\t\ttempInstruct.back()->m_length += N;\n\t\t\t\t\t\tj += N - 1;\n\t\t\t\t\t\tlastAdd = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{*/\n\t\t\t\t\t\ttemp = new Read;\n\t\t\t\t\t\ttemp->m_value = \"C\";\n\t\t\t\t\t\tSame = N;\n\t\t\t\t\t\ttemp->m_offset = offset;\n\t\t\t\t\t\twhile (j + Same < newData.size() - 1 && offset + Same < oldData.size() - 1 && newData[j + Same] == oldData[offset + Same])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSame++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttemp->m_length = Same;\n\t\t\t\t\t\ttempInstruct.push_back(temp);\n\t\t\t\t\t\tj += Same - 1;\n\t\t\t\t\t\tlastAdd = false;\n\t\t\t\t\t//}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//cerr << \"Line 80\" << endl;\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tlastAdd = false;\n\t\t\t\t\t//cerr << \"Line 84: \" << j << endl;\n\t\t\t\t}\n\t\t\t\tif (lastAdd)\n\t\t\t\t{\n\t\t\t\t\t//cerr << \"Line 88: \" << j << endl;\n\t\t\t\t\ttempInstruct.back()->m_value += newData[j];\n\t\t\t\t\ttempInstruct.back()->m_length += 1;\n\t\t\t\t\tlastAdd = true;\n\t\t\t\t}\n\t\t\t\telse if (!lastAdd)\n\t\t\t\t{\n\t\t\t\t\t//cerr << \"Line 95: \" << j << endl;\n\t\t\t\t\ttemp = new Read;\n\t\t\t\t\t//cerr << newData[j] << \"HHHHH\" << endl;\n\t\t\t\t\ttemp->m_value = \"A\";\n\t\t\t\t\ttemp->m_value += newData[j];\n\n\t\t\t\t\ttemp->m_length = 1;\n\t\t\t\t\ttempInstruct.push_back(temp);\n\t\t\t\t\t//cerr << tempInstruct.back()->m_value << endl;\n\t\t\t\t\tlastAdd = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//cerr << tempInstruct.back()->m_value << endl;\n\t\t}\n\t\telse if (j < newData.size())\n\t\t{\n\t\t\tif (lastAdd)\n\t\t\t{\n\t\t\t\t//cerr << \"Line 88: \" << j << endl;\n\t\t\t\ttempInstruct.back()->m_value += newData[j];\n\t\t\t\ttempInstruct.back()->m_length += 1;\n\t\t\t\tlastAdd = true;\n\t\t\t}\n\t\t\telse if (!lastAdd)\n\t\t\t{\n\t\t\t\t//cerr << \"Line 95: \" << j << endl;\n\t\t\t\ttemp = new Read;\n\t\t\t\t//cerr << newData[j] << \"HHHHH\" << endl;\n\t\t\t\ttemp->m_value = \"A\";\n\t\t\t\ttemp->m_value += newData[j];\n\t\t\t\ttemp->m_length = 1;\n\t\t\t\ttempInstruct.push_back(temp);\n\t\t\t\t//cerr << tempInstruct.back()->m_value << endl;\n\t\t\t\tlastAdd = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t//cerr << \"Hash\" << endl;\n\tstring deltaString;\n\t//cerr << tempInstruct.front()->m_value << endl;\n\t\n\twhile (!tempInstruct.empty())\n\t{\n\t\tif (tempInstruct.front()->m_value[0] == 'A')\n\t\t{\n\t\t\tdeltaString += \"A\" + to_string(tempInstruct.front()->m_length) + \":\" + tempInstruct.front()->m_value.substr(1, tempInstruct.front()->m_value.size() - 1);\n\t\t\t//cerr << \"A\" + to_string(tempInstruct.front()->m_length) + \":\" + tempInstruct.front()->m_value.substr(1, tempInstruct.front()->m_value.size() - 1) << endl;\n\t\t\tdelete tempInstruct.front();\n\t\t\ttempInstruct.pop_front();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tdeltaString += \"C\" + to_string(tempInstruct.front()->m_length) + \",\" + to_string(tempInstruct.front()->m_offset);\n\t\t\t//cerr << \"C\" + to_string(tempInstruct.front()->m_length) + \",\" + to_string(tempInstruct.front()->m_offset) << endl;\n\t\t\t//delete tempInstruct.front();\n\t\t\ttempInstruct.pop_front();\n\t\t}\n\t}\n\t//cerr << \"Instruct\" << endl;\n\tdeltaf << deltaString << endl;\n}\n\nbool getInt(istream& inf, int& n)\n{\n\tchar ch;\n\tif (!inf.get(ch) || !isascii(ch) || !isdigit(ch))\n\t\treturn false;\n\tinf.unget();\n\tinf >> n;\n\treturn true;\n}\n\nbool getCommand(istream& inf, char& cmd, int& length, int& offset)\n{\n\tif (!inf.get(cmd) || (cmd == '\\n' && !inf.get(cmd)))\n\t{\n\t\tcmd = 'x';  // signals end of file\n\t\treturn true;\n\t}\n\tchar ch;\n\tswitch (cmd)\n\t{\n\tcase 'A':\n\t\treturn getInt(inf, length) && inf.get(ch) && ch == ':';\n\tcase 'C':\n\t\treturn getInt(inf, length) && inf.get(ch) && ch == ',' && getInt(inf, offset);\n\t}\n\treturn false;\n}\n\nbool applyDelta(istream& oldf, istream& deltaf, ostream& newf)\n{\n\tstring oldData;\n\toldf.seekg(0, oldf.end);\n\toldData.resize(oldf.tellg()); // get length of file\n\toldf.seekg(0, oldf.beg);\n\toldf.read(&oldData[0], oldData.size()); // read data as a block\n\t#ifdef _WIN32  //  Windows OS\n\tint rCount = count(oldData.begin(), oldData.end(), '\\n') - 1;\n\tif (rCount < 0)\n\t\trCount = 0;\n\toldData.erase(oldData.end() - rCount, oldData.end());\n\t#endif\n\n\tchar cmd;\n\tchar input;\n\tint length;\n\tint offset;\n\n\twhile (getCommand(deltaf, cmd, length, offset))\n\t{\n\t\tif (cmd == 'C')\n\t\t{\n\t\t\tnewf << oldData.substr(offset, length);\n\t\t}\n\t\telse if (cmd == 'A')\n\t\t{\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tdeltaf.get(input);\n\t\t\t\tnewf << input;\n\t\t\t}\n\t\t}\n\t\telse if (cmd = 'x')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nbool compareFiles(istream& newf, istream& newf2)\n{\n\tstring newData;\n\tnewf.seekg(0, newf.end);\n\tnewData.resize(newf.tellg()); // get length of file\n\tnewf.seekg(0, newf.beg);\n\tnewf.read(&newData[0], newData.size()); // read data as a block\n\t#ifdef _WIN32  //  Windows OS\n\tint rCount = count(newData.begin(), newData.end(), '\\n') - 1;\n\tif (rCount < 0)\n\t\trCount = 0;\n\tnewData.erase(newData.end() - rCount, newData.end());\n\t#endif\n\t//cerr << newData << \"hi\" << endl;\n\n\tstring new2Data;\n\tnewf2.seekg(0, newf2.end);\n\tnew2Data.resize(newf2.tellg()); // get length of file\n\tnewf2.seekg(0, newf2.beg);\n\tnewf2.read(&new2Data[0], new2Data.size()); // read data as a block\n\t#ifdef _WIN32  //  Windows OS\n\trCount = count(new2Data.begin(), new2Data.end(), '\\n') - 1;\n\tif (rCount < 0)\n\t\trCount = 0;\n\tnew2Data.erase(new2Data.end() - rCount, new2Data.end());\n\t#endif\n\t//cerr << new2Data << \"hello\" << endl;\n\tcerr << \"Comparing\" << endl;\n\treturn newData == new2Data;\n}\n\nbool runtest(string oldname, string newname, string deltaname, string newname2)\n{\n\tifstream oldfile(oldname);\n\tif (!oldfile)\n\t{\n\t\tcerr << \"Cannot open \" << oldname << endl;\n\t\treturn false;\n\t}\n\tifstream newfile(newname);\n\tif (!newfile)\n\t{\n\t\tcerr << \"Cannot open \" << newname << endl;\n\t\treturn false;\n\t}\n\tofstream deltafile(deltaname);\n\tif (!deltafile)\n\t{\n\t\tcerr << \"Cannot create \" << deltaname << endl;\n\t\treturn false;\n\t}\n\tcreateDelta(oldfile, newfile, deltafile);\n\tdeltafile.close();\n\n\toldfile.clear();   // clear the end of file condition\n\toldfile.seekg(0);  // reset back to beginning of the file\n\tifstream deltafile2(deltaname);\n\tif (!deltafile2)\n\t{\n\t\tcerr << \"Cannot read the \" << deltaname << \" that was just created!\" << endl;\n\t\treturn false;\n\t}\n\tofstream newfile2(newname2);\n\tif (!newfile2)\n\t{\n\t\tcerr << \"Cannot create \" << newname2 << endl;\n\t\treturn false;\n\t}\n\tassert(applyDelta(oldfile, deltafile2, newfile2));\n\n\tnewfile2.close();\n\tifstream newfile3(newname2);\n\tnewfile.clear();   // clear the end of file condition\n\tnewfile.seekg(0);  // reset back to beginning of the file\n\n\tassert(compareFiles(newfile, newfile3));\n\tcout << \"You must compare \" << newname << \" and \" << newname2 << endl;\n\tcout << \"If they are not identical, you failed this test.\" << endl;\n\treturn true;\n}\n\nint main()\n{\n\tassert(runtest(\"smallmart1.txt\", \"smallmart2.txt\", \"smallmartDelta.txt\", \"smallmart2_new.txt\"));\n\tassert(runtest(\"greeneggs1.txt\", \"greeneggs2.txt\", \"greeneggsDelta.txt\", \"greeneggs2_new.txt\"));\n\tassert(runtest(\"warandpeace1.txt\", \"warandpeace2.txt\", \"warandpeaceDelta.txt\", \"warandpeace2_new.txt\"));\n\tassert(runtest(\"strange1.txt\", \"strange2.txt\", \"strangeDelta.txt\", \"strange2_new.txt\"));\n}",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464896917738,
      "content": "Niceuuuuu",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464894039213,
      "content": "yes",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464894037498,
      "content": "Saturday?",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464843759739,
      "content": "Do you have the day off for my graduation?",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464802428957,
      "content": "Okay stay safe",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464802426420,
      "content": "Oh I see",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464802370600,
      "content": "I was 10minutes late for class and then the shooting happened so I stayed home.",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464802343450,
      "content": "RIP",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1464802337102,
      "content": "\u00f0\u009f\u0092\u0080",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464802336032,
      "content": "I HEARD OF THE SHOOTING",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1464802326263,
      "content": "OMG DANNY ARE YOU OKAY",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1463807493199,
      "content": "Oh maybe I'll go. We'll see.",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1463805185324,
      "content": "Oh okay. I'll probably be working. Or something",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1463805162619,
      "content": "No that's next year",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1463805157384,
      "content": "Why not",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1463805146890,
      "content": "Are you gonna be a monk this winter?",
      "type": "Generic"
    },
    {
      "sender_name": "Danny Depe",
      "timestamp_ms": 1463805132143,
      "content": "Naw dog",
      "type": "Generic"
    },
    {
      "sender_name": "Justin Le",
      "timestamp_ms": 1463805084412,
      "content": "Are you going to Laos in winter?",
      "type": "Generic"
    }
  ],
  "title": "Danny Depe",
  "is_still_participant": true,
  "thread_type": "Regular",
  "thread_path": "inbox/DannyDepe_MpHx6welGg"
}